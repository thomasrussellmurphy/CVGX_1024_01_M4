
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module CVGX_1024_01_M4(

         //////////// CLOCK //////////
         input CLOCK_125_p,
         input CLOCK_50_B5B,
         input CLOCK_50_B6A,
         input CLOCK_50_B7A,
         input CLOCK_50_B8A,

         //////////// LED //////////
         output [ 7: 0 ] LEDG,
         output [ 9: 0 ] LEDR,

         //////////// KEY //////////
         input CPU_RESET_n,
         input [ 3: 0 ] KEY,

         //////////// SW //////////
         input [ 9: 0 ] SW,

         //////////// SEG7 //////////
         output [ 6: 0 ] HEX0,
         output [ 6: 0 ] HEX1,
         output [ 6: 0 ] HEX2,
         output [ 6: 0 ] HEX3,

         //////////// HDMI-TX //////////
         output HDMI_TX_CLK,
         output [ 23: 0 ] HDMI_TX_D,
         output HDMI_TX_DE,
         output HDMI_TX_HS,
         input HDMI_TX_INT,
         output HDMI_TX_VS,

         //////////// ADC SPI //////////
         output ADC_CONVST,
         output ADC_SCK,
         output ADC_SDI,
         input ADC_SDO,

         //////////// Audio //////////
         input AUD_ADCDAT,
         inout AUD_ADCLRCK,
         inout AUD_BCLK,
         output AUD_DACDAT,
         inout AUD_DACLRCK,
         output AUD_XCK,

         //////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
         output I2C_SCL,
         inout I2C_SDA,

         //////////// SDCARD //////////
         output SD_CLK,
         inout SD_CMD,
         inout [ 3: 0 ] SD_DAT,

         //////////// Uart to USB //////////
         input UART_RX,
         output UART_TX,

         //////////// SRAM //////////
         output [ 17: 0 ] SRAM_A,
         output SRAM_CE_n,
         inout [ 15: 0 ] SRAM_D,
         output SRAM_LB_n,
         output SRAM_OE_n,
         output SRAM_UB_n,
         output SRAM_WE_n,

         //////////// HSMC, HSMC connect to 1024-01 Standard Pinout //////////
         inout [ 29: 0 ] UNUSED,
         output BLINK1,
         inout LMZ31503_CLK,
         output BLINK2,
         input LMZ31503_PWRGD,
         output DAC_DCLKIN_P,
         output DAC_FCLKIN_P,
         output DACA_DATA0_P,
         output DACA_DATA1_P,
         output DACB_DATA0_P,
         output DACB_DATA1_P,
         input ADC_DCLKOUT_P,
         input ADC_FCLKOUT_P,
         input ADCB_DATA0_P,
         input ADCB_DATA1_P,
         input ADCA_DATA0_P,
         input ADCA_DATA1_P,
         output SYNCIN_P,
         output FPGA_AFE_PDN,
         output FPGA_AFE_SEN,
         output FPGA_AFE_SDATA,
         output FPGA_AFE_SCLK,
         inout FPGA_AFE_SDOUT,
         output FPGA_AFE_RESET,
         output FPGA_CDCE_MOSI,
         input FPGA_CDCE_MISO,
         output FPGA_CDCE_PD,
         output FPGA_CDCE_SCLK,
         output FPGA_CDCE_LE,
         input FPGA_CDCE_PLL_LOCK,
         output FPGA_ADRF_DATA,
         output FPGA_AD5644R_CLK,
         output FPGA_AD5644R_SYNC,
         output FPGA_ADRF_LE,
         output FPGA_ADRF_CLK,
         input FPGA_ADRF_SDO,
         output HSMC_CLKOUT2_P,
         input FPGA_REF_CLK_P
       );



//=======================================================
//  REG/WIRE declarations
//=======================================================

// For master config internal PLL
wire cvconfigpll_lock;
wire cvconfigpll_clk16;
wire cvconfigpll_reset;

// For CDCE config indication
wire cdce_config_done;
assign BLINK1 = FPGA_CDCE_PLL_LOCK;

// For PLL reset and status
assign cvconfigpll_reset = ~KEY[ 0 ];
assign LEDG[ 0 ] = cvconfigpll_lock;
assign LEDG [ 1 ] = FPGA_CDCE_PLL_LOCK;

// Indicate configuration-done
assign LEDR [ 0 ] = cdce_config_done;

// Assigning configuration clock outputs, even if they aren't used
assign FPGA_AFE_SCLK = cvconfigpll_clk16;
assign FPGA_AD5644R_CLK = cvconfigpll_clk16;
assign FPGA_ADRF_CLK = ~cvconfigpll_clk16;
assign FPGA_CDCE_SCLK = ~cvconfigpll_clk16;

// TEMP assignments here
assign FPGA_AFE_PDN = 1'b1;

//=======================================================
//  Structural coding
//=======================================================

// Blinking light on the board
blink blink2_led_blink
      (
        .clk( cvconfigpll_clk16 ),
        .reset_n( cvconfigpll_lock ),
        .blink( BLINK2 )
      );

// PLL that supplies always-available clocks for configuration
pll_50_to_16 config_pll
             (
               .refclk( CLOCK_50_B7A ),
               .rst( cvconfigpll_reset ),
               .outclk_0( cvconfigpll_clk16 ),
               .locked( cvconfigpll_lock )
             );


// Instantiate configuration controller
cdce_configure configuration_master
               (
                 .clk( cvconfigpll_clk16 ),
                 .reset_n( cvconfigpll_lock ),
                 .miso( FPGA_CDCE_MISO ),
                 .pdn( FPGA_CDCE_PD ),
                 .cs_n( FPGA_CDCE_LE ),
                 .mosi( FPGA_CDCE_MOSI ),
                 .configure_done( cdce_config_done )
               );

endmodule
